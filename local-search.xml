<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Smikunx&#39;s first blog</title>
    <link href="/2024/11/02/Smikunx-s-first-blog/"/>
    <url>/2024/11/02/Smikunx-s-first-blog/</url>
    
    <content type="html"><![CDATA[<h3 id="线段树模板1"><a href="#线段树模板1" class="headerlink" title="线段树模板1"></a><a href="https://www.luogu.com.cn/problem/P3372">线段树模板1</a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> LOCAL</span><br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">auto</span> maxn=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">21</span>;<span class="hljs-type">char</span> Cin[maxn],Cout[maxn],*p1=Cin,*p2=Cin,*p3=Cout;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> getchar()(p1==p2&amp;&amp;(p2=(p1=Cin)+fread(Cin,1,maxn,stdin),p1==p2)?EOF:*p1++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ros()(fwrite(Cout,1,p3-Cout,stdout))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> putchar(x)(p3==Cout+maxn&amp;&amp;(ros(),p3=Cout),*p3++=(x))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> isdigit(x) ((x)&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;(x)&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ROS</span>&#123;<span class="hljs-keyword">public</span>:~<span class="hljs-built_in">ROS</span>()&#123;<span class="hljs-built_in">ros</span>();&#125;&#125;_;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> type&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> type <span class="hljs-title">Miku</span><span class="hljs-params">(type&amp;x)</span></span>&#123;x=<span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">flag</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<span class="hljs-type">char</span> ch=<span class="hljs-built_in">getchar</span>();<span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))flag^=ch==<span class="hljs-string">&#x27;-&#x27;</span>,ch=<span class="hljs-built_in">getchar</span>();<span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))x=(x&lt;&lt;<span class="hljs-number">1</span>)+(x&lt;&lt;<span class="hljs-number">3</span>)+(ch^<span class="hljs-number">48</span>),ch=<span class="hljs-built_in">getchar</span>();<span class="hljs-keyword">return</span> flag?x=-x:x;&#125;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> type&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Iliya</span><span class="hljs-params">(type x)</span></span>&#123;x&lt;<span class="hljs-number">0</span>?x=-x,<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>):<span class="hljs-number">0</span>;<span class="hljs-type">static</span> <span class="hljs-type">short</span> Stack[<span class="hljs-number">50</span>],<span class="hljs-built_in">top</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">do</span> Stack[++top]=x%<span class="hljs-number">10</span>,x/=<span class="hljs-number">10</span>;<span class="hljs-keyword">while</span>(x);<span class="hljs-keyword">while</span>(top)<span class="hljs-built_in">putchar</span>(Stack[top--]|<span class="hljs-number">48</span>);&#125;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> type,<span class="hljs-keyword">typename</span>...T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">char</span> <span class="hljs-title">Miku</span><span class="hljs-params">(<span class="hljs-type">char</span>&amp;x)</span></span>&#123;<span class="hljs-keyword">do</span> x=<span class="hljs-built_in">getchar</span>();<span class="hljs-keyword">while</span>(<span class="hljs-built_in">isspace</span>(x));<span class="hljs-keyword">return</span> x;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Iliya</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>&amp;x)</span></span>&#123;<span class="hljs-built_in">putchar</span>(x);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Miku</span><span class="hljs-params">(string&amp;x)</span></span>&#123;<span class="hljs-type">static</span> <span class="hljs-type">char</span> ch;ch=<span class="hljs-built_in">getchar</span>(),x.<span class="hljs-built_in">clear</span>();<span class="hljs-keyword">do</span> x+=ch;<span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isspace</span>(ch=<span class="hljs-built_in">getchar</span>())&amp;&amp;~ch);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Iliya</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp;x)</span></span>&#123;<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,len=x.<span class="hljs-built_in">length</span>();i&lt;len;++i)<span class="hljs-built_in">putchar</span>(x[i]);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Miku</span><span class="hljs-params">(<span class="hljs-type">char</span>*x)</span></span>&#123;<span class="hljs-type">static</span> <span class="hljs-type">char</span> ch;ch=<span class="hljs-built_in">getchar</span>();<span class="hljs-keyword">do</span>*(x++)=ch;<span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isspace</span>(ch=<span class="hljs-built_in">getchar</span>())&amp;&amp;~ch);&#125;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> type&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Iliya</span><span class="hljs-params">(type*x)</span></span>&#123;<span class="hljs-keyword">while</span>(*x)<span class="hljs-built_in">putchar</span>(*(x++));&#125;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> type, <span class="hljs-keyword">typename</span>...T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Miku</span><span class="hljs-params">(type&amp;x,T&amp;...y)</span></span>&#123;<span class="hljs-built_in">Miku</span>(x),<span class="hljs-built_in">Miku</span>(y...);&#125;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> type,<span class="hljs-keyword">typename</span>...T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Iliya</span><span class="hljs-params">(<span class="hljs-type">const</span> type&amp;x,<span class="hljs-type">const</span> T&amp;...y)</span></span>&#123;<span class="hljs-built_in">Iliya</span>(x),<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>),<span class="hljs-built_in">Iliya</span>(y...), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);&#125;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> type,<span class="hljs-keyword">typename</span>...T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Miyu</span><span class="hljs-params">(<span class="hljs-type">const</span> type&amp;x,<span class="hljs-type">const</span> T&amp;...y)</span></span>&#123;<span class="hljs-built_in">Iliya</span>(x, y...);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> LOCAL</span><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> getchar</span><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> ros</span><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> putchar</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br>ll t[N &lt;&lt; <span class="hljs-number">1</span>], add[N];<br><span class="hljs-type">int</span> h, n, m;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ls(now) ((now) &lt;&lt; 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rs(now) ((now) &lt;&lt; 1 | 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> push_u(now) <span class="hljs-keyword">if</span>(!add[(now)])t[(now)]=t[ls(now)]+t[rs(now)]</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(l += n - <span class="hljs-number">1</span>, r += n - <span class="hljs-number">1</span>; l &gt; <span class="hljs-number">1</span>;) &#123;<br>l &gt;&gt;= <span class="hljs-number">1</span>, r &gt;&gt;= <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = l; i &lt;= r; i ++) <span class="hljs-built_in">push_u</span>(i);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">tag</span><span class="hljs-params">(<span class="hljs-type">int</span> x, ll Add, <span class="hljs-type">int</span> len)</span> </span>&#123;<br>t[x] += Add * len; add[x] += (x &lt; n) * Add;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>x += n - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = h, len = (<span class="hljs-number">1</span> &lt;&lt; (h - <span class="hljs-number">1</span>)); k; k --, len &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">int</span> w = x &gt;&gt; k;<br><span class="hljs-keyword">if</span>(add[w]) <span class="hljs-built_in">tag</span>(<span class="hljs-built_in">ls</span>(w), add[w], len), <span class="hljs-built_in">tag</span>(<span class="hljs-built_in">rs</span>(w), add[w], len), add[w] = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Modify</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, ll Add)</span> </span>&#123;<br><span class="hljs-type">int</span> L = l, R = r, len = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">push</span>(l), <span class="hljs-built_in">push</span>(r);<br>r ++;<br><span class="hljs-keyword">for</span>(l += n - <span class="hljs-number">1</span>, r += n - <span class="hljs-number">1</span>; l &lt; r; l &gt;&gt;= <span class="hljs-number">1</span>, r &gt;&gt;= <span class="hljs-number">1</span>, len &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span>(l &amp; <span class="hljs-number">1</span>) <span class="hljs-built_in">tag</span>(l ++, Add, len);<br><span class="hljs-keyword">if</span>(r &amp; <span class="hljs-number">1</span>) <span class="hljs-built_in">tag</span>(-- r, Add, len);<br>&#125;<br><span class="hljs-built_in">build</span>(L, L), <span class="hljs-built_in">build</span>(R, R);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br><span class="hljs-built_in">push</span>(l), <span class="hljs-built_in">push</span>(r);<br>ll res = <span class="hljs-number">0</span>;<br>r ++;<br><span class="hljs-keyword">for</span>(l += n - <span class="hljs-number">1</span>, r += n - <span class="hljs-number">1</span>; l &lt; r; l &gt;&gt;= <span class="hljs-number">1</span>, r &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span>(l &amp; <span class="hljs-number">1</span>) res += t[l ++];<br><span class="hljs-keyword">if</span>(r &amp; <span class="hljs-number">1</span>) res += t[-- r];<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">Miku</span>(n, m);<br>h = <span class="hljs-number">32</span> - __builtin_clz(n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n; i &lt; (n &lt;&lt; <span class="hljs-number">1</span>); i ++) <span class="hljs-built_in">Miku</span>(t[i]);<br><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> op, l, r, Add; m --; ) &#123;<br><span class="hljs-built_in">Miku</span>(op, l, r);<br><span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>) &#123; <span class="hljs-built_in">Miku</span>(Add); <span class="hljs-built_in">Modify</span>(l, r, Add); &#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">Miyu</span>(<span class="hljs-built_in">query</span>(l, r));<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/02/hello-world/"/>
    <url>/2024/11/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
